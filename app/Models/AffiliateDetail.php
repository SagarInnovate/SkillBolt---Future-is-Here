<?php
// app/Models/AffiliateDetail.php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class AffiliateDetail extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'user_id',
        'affiliate_code',
        'status',
        'tier_level',
        'total_earnings',
        'available_balance',
        'total_referrals',
        'successful_referrals',
        'qr_code_path',
        'last_reconciled_at',
    ];

    protected $casts = [
        'total_earnings' => 'decimal:2',
        'available_balance' => 'decimal:2',
        'tier_level' => 'integer',
        'total_referrals' => 'integer',
        'successful_referrals' => 'integer',
        'last_reconciled_at' => 'datetime',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
    /**
     * Get the referrals generated by this affiliate.
     */
    public function referrals()
    {
        return $this->hasMany(Referral::class, 'referrer_id', 'user_id');
    }
    
    /**
     * Get the commissions earned by this affiliate.
     */
    public function commissions()
    {
        return $this->hasMany(Commission::class, 'user_id', 'user_id');
    }
    
    /**
     * Get the payouts for this affiliate.
     */
    public function payouts()
    {
        return $this->hasMany(Payout::class, 'user_id', 'user_id');
    }
    
    /**
     * Get the referral clicks for this affiliate.
     */
    public function referralClicks()
    {
        return $this->hasMany(ReferralClick::class, 'referral_code', 'affiliate_code');
    }
    
    /**
     * Calculate the click-to-signup conversion rate.
     */
    public function getConversionRateAttribute(): float
    {
        $clicks = $this->referralClicks()->count();
        
        if ($clicks === 0) {
            return 0;
        }
        
        return round(($this->total_referrals / $clicks) * 100, 2);
    }
    
    /**
     * Generate QR code for the affiliate link.
     */
    public function generateQrCode(): string
    {
        // Implementation will be in AffiliateService
        return '';
    }
    
    /**
     * Get the full referral link.
     */
    public function getReferralLinkAttribute(): string
    {
        return url('/?ref=' . $this->affiliate_code);
    }
    
    /**
     * Update the tier level based on successful referrals.
     */
    public function updateTierLevel(): void
    {
        // Implementation will be in AffiliateService
    }


    public function getCalculatedBalanceAttribute(): float
    {
        return Transaction::calculateUserBalance($this->user_id);
    }

}